{"meta":{"title":"chen","subtitle":"","description":"","author":"chen28176","url":"https://chen28176.github.io","root":"/"},"pages":[],"posts":[{"title":"平台部署","slug":"聚合搜索平台项目部署","date":"2023-05-24T08:28:35.383Z","updated":"2023-05-24T08:28:53.190Z","comments":true,"path":"2023/05/24/聚合搜索平台项目部署/","link":"","permalink":"https://chen28176.github.io/2023/05/24/%E8%81%9A%E5%90%88%E6%90%9C%E7%B4%A2%E5%B9%B3%E5%8F%B0%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/","excerpt":"","text":"项目部署（docker部署）elasticsearch部署 因为我们还需要部署kibana容器，因此需要让elasticsearch和kibana容器互联。这里先创建一个网络： 1docker network create es-net 加载镜像，我用的elasticsearch的7.12.1版本的镜像，镜像放到网盘里了。 链接：https://pan.baidu.com/s/1WULYE5JqDFbulyFypstY8A提取码：ldqj 大家将es.tar其上传到服务器上，然后运行命令加载即可： 12# 导入数据docker load -i es.tar 3.运行docker命令,启动容器 1234567891011docker run -d \\ --name es \\ -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \\ -e &quot;discovery.type=single-node&quot; \\ -v es-data:/usr/share/elasticsearch/data \\ -v es-plugins:/usr/share/elasticsearch/plugins \\ --privileged \\ --network es-net \\ -p 9200:9200 \\ -p 9300:9300 \\elasticsearch:7.12.1 命令解释： -e &quot;cluster.name=es-docker-cluster&quot;：设置集群名称 -e &quot;http.host=0.0.0.0&quot;：监听的地址，可以外网访问 -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;：内存大小 -e &quot;discovery.type=single-node&quot;：非集群模式 -v es-data:/usr/share/elasticsearch/data：挂载逻辑卷，绑定es的数据目录 -v es-logs:/usr/share/elasticsearch/logs：挂载逻辑卷，绑定es的日志目录 -v es-plugins:/usr/share/elasticsearch/plugins：挂载逻辑卷，绑定es的插件目录 --privileged：授予逻辑卷访问权 --network es-net ：加入一个名为es-net的网络中 -p 9200:9200：端口映射配置 kibana部署和elasticsearch部署步骤一样。 先加载镜像，**(镜像我放到了网盘里，链接在上方)** 1docker load -i es.tar 运行docker命令，部署kibana 123456docker run -d \\--name kibana \\-e ELASTICSEARCH_HOSTS=http://es:9200 \\--network=es-net \\-p 5601:5601 \\kibana:7.12.1 --network es-net ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中 -e ELASTICSEARCH_HOSTS=http://es:9200&quot;：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch -p 5601:5601：端口映射配置 安装ik分词器 安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看: 1docker volume inspect es-plugins 显示结果： 1234567891011[ &#123; &quot;CreatedAt&quot;: &quot;2022-05-06T10:06:34+08:00&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Labels&quot;: null, &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/es-plugins/_data&quot;, &quot;Name&quot;: &quot;es-plugins&quot;, &quot;Options&quot;: null, &quot;Scope&quot;: &quot;local&quot; &#125;] 说明plugins目录被挂载到了：/var/lib/docker/volumes/es-plugins/_data 这个目录中。 在本地解压ik分词器压缩包，重命名为ik（压缩包放到了网盘，链接在上方） 上传到es容器的插件数据卷中，也就是/var/lib/docker/volumes/es-plugins/_data 重启容器 12# 4、重启容器docker restart es 12# 查看es日志docker logs -f es 前端项目部署打包后,直接部署到nginx上，server配置如下 1234567891011121314151617server &#123; listen 8000; server_name localhost; include enable-php.conf; location / &#123; root search-frontend/dist; # 你的dist存放的目录 index index.html index.htm; try_files $uri /index.html; &#125; location /api &#123; proxy_pass http://locahost:8101; #你的后端的地址 &#125; &#125; 后端项目部署 编写Dockerfile文件 1234FROM openjdk:8COPY ./search-backend.jar /tmp/search-backend.jarEXPOSE 8101ENTRYPOINT java -jar -Duser.timezone=GMT+08 /tmp/search-backend.jar 构建镜像 1docker build -f Dockerfile -t search-backend . 运行容器 1docker run -id --name=search-backend -p 8101:8101 --add-host host.docker.internal:host-gateway search-backend 注意：如果使用docker部署，locahost访问的不是宿主机，而是容器。需要将配置文件application.yml中的 localhost 替换成 host.docker.internal 然后运行容器时添加命令： –add-host host.docker.internal:host-gateway 参考:","categories":[],"tags":[]},{"title":"web竞赛的一些经验（前端）","slug":"心得体会","date":"2023-05-24T08:25:49.345Z","updated":"2023-05-24T08:25:57.360Z","comments":true,"path":"2023/05/24/心得体会/","link":"","permalink":"https://chen28176.github.io/2023/05/24/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/","excerpt":"","text":"赛前准备👌 需要具备的基本技术 vue： 比赛拿到的项目里移动端项目为vue2技术，而pc端项目为vue3项目，学会vue2后vue3基本可以在一个月之内简单上手 vuex ：状态管理模式，比赛项目是有用到的，但是占比很少，如若学习时间不够，那能看懂就行了。比赛时间太少了还没用到就结束了 axios：💡要求掌握,网络封装请求库，比赛项目百分百会使用到。 vant element-ui：这两个是组件库来自用于搭建页面，基本会一个另外一个也会使用了，比赛会部署到服务器上使用，选手在桌面点击他的一个命令窗口后弹出cmd窗口。等它执行完毕，在浏览器输入文档中的地址即可访问 手写商城项目 即便有试题，需要短时间学会很难，所以建议是看视频写一个vue的商城 注意使用到的技术需要与试题的一样。 vue2与vuex这两种基本已经停止更新了，不知道比赛方还会不会使用到，所以写的项目用的技术尽量与试题要求的技术一样。 阅读能力 拿到项目后里面一堆奇奇怪怪的目录，所以要求有一定的阅读能力。 需要你到用户页面操作答题。建议第一时间去router（路由文件夹）查看,里面会有各个页面的注释。 建议，学完vue后可以去找一下商城项目进行阅读熟悉，看多了就对哪个目录有什么文件一目了然了 进入考场 考场准备 会有时间给你检查设备的，那天比赛别的组出现过键盘无法使用的情况，另外那边屏幕太差了，看的眼睛痛 拿到文件袋，文件袋里面有个表，表里面的内容就是填写检查的设备是否完好之类的，还有u盘，笔，草稿纸。 会有人会说u盘的解压密码，选手把解压密码写到草稿纸即可。 u盘传输每秒只有100kb左右所以比赛快结束的时候预留充分的时间，整个商城项目是非常大的，做完的时候打包一个改项目后提交 开始抽试卷，一共有三道，我们那天比赛抽到的是a卷。 💡u盘目录有两个文件夹 1231.代码提交区 用于把打包后的代码提交到上面2,竞赛内容区 原型设计书，三个压缩包，一个移动端，一个pc，一个后端，另外其他的不重要也就没细细看了 💡注意，检查软件的时候建议就把后端项目跑起来，第一时间把后端项目跑起来，避免出现前端跑起来而拿不到数据的情况 vue2与vue3 如果你不是很熟悉vue3,不要慌，它整个商城项目是写好的了，你不知道具体格式是什么，就去别的vue文件看看。就比如我不知道获取接口，然后我跑到其他页面，看到他们是怎么操作接口的，我也就照猫画虎整了一个 排错详解 三道题。较为简单，可惜我时间花费比预计的长了一点，排错能力没问题，但是阅读能力太差了我。 印象不深刻就讲述一些记住的地方 ，可以理解为每道题5分，每道题有五个空 &#x3D;&#x3D;第一个是&#x3D;&#x3D; 要你把商品固定成一行两列，然后点击全选按钮其他产品会全选到。 全选按钮方法已经自带了，所以只要在全选按钮那里绑定点击事件即可 @click 固定成一行两列我一开始以为是flex布局，后面又用了网格布局，然后还是无法实现。最后花了几分钟在vant文档找到了解决方法 1默认一行展示四个格子，可以通过 column-num 自定义列数。 123&lt;van-grid :column-num=&quot;3&quot;&gt; &lt;van-grid-item v-for=&quot;value in 6&quot; :key=&quot;value&quot; icon=&quot;photo-o&quot; text=&quot;文字&quot; /&gt;&lt;/van-grid&gt; 只需要在加入：column-num来控制列数，所以整个试卷没有考到css，这点是我大意了，终究是我对vant不够熟悉才产生的难点 第二个是 订单的增删改查功能 如图所示，上述代码中购物车里的几个红全是静态的没有数据，而点击了也没有交互 而我们要做的就是把购物车里的页面的静态数据替换成动态的，相当简单，算是送分题目。 数据已经有了，方法也已经有了，所以只需要拿他们提供的数据渲染到页面，方法绑定到按钮上即可 第三个是地址列表功能 要求默认必须只能一个， 点击编辑跳转到联系人页，姓名，电话，地区，详细地址，需要检验，邮政编码 设为默认收获地址无需校验，送分题 三个排错题目较为简单能拿8分以上算优秀，代码注释太少，还是需要考验阅读能力 程序编码 &#x3D;&#x3D;注意比赛的时候题目不可能和我写的一模一样。&#x3D;&#x3D; 由于我负责的是移动端项目，时间没有分配好，所以导致开发的时候只有两个小时左右不到的时间程序编码。很遗憾就做了两个还是半成品 题目一 会提供接口给我们，我们需要根据接口进行操作。 我一开始就是axios获取数据，点击商品详细的时候会附带对于的id， 接着我们拿到id后到去请求对应的数据，拿到数据后进行渲染操作，这个可以用vant速搭。 点击加入购物车后会弹出一个框也是需要搭建一下 点击进入商品详细，加入购物车，没有一点代码，全是要靠自己去使用组件库vant搭建 1这个就仅仅占了一题，一共十题，所以正常比赛中，两个人能做完5题就已经很一等奖打招呼了 最后搭建我购物车，准备做数据交互的时候，发现时间不够了，于是我和同伴说，不要做数据交互了，把页面搭建起来比较容易拿分， 所以我开始做了第二个 第二题 第二题和第一题有联系的， 第一题的详情页搭建好了后，在详情页点击加入购物车跳转到购物车页面 第二题要的就是你搭建购物车页面，并且购物车要能够增删操作，并且点击下单后会跳转到订单支付页面，也是需要搭建的， 购物车的产品大概是这样 向右滑动可删除 底部长这样 （黄色那段字，原本是向右滑动可删除商品） 订单支付页面大概长这样","categories":[],"tags":[]},{"title":"前端开发保存路由的方法","slug":"前端开发保存页面状态","date":"2023-05-23T17:05:10.267Z","updated":"2023-05-23T17:23:20.702Z","comments":true,"path":"2023/05/24/前端开发保存页面状态/","link":"","permalink":"https://chen28176.github.io/2023/05/24/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BF%9D%E5%AD%98%E9%A1%B5%E9%9D%A2%E7%8A%B6%E6%80%81/","excerpt":"","text":"前端开发用url记录搜索状态，当页面刷新时，能够从url还原之前的搜索状态 技巧:把同步状态改成单项，运行url来改变页面状态，不允许反向 1，让用户在操作的时候，改变url地址（点击搜索框，搜索内容填充到url上?,切换tab时，也要填充） 2，当页面刷新url改变的时候，去改变页面状态（监听url的改变） IndexPage.vue 核心代码 1234567891011121314151617181920212223242526272829303132333435const router = useRouter();const route = useRoute();const activeKey = route.params.category;// 存储默认初始值const initSearchParams = &#123; text: &quot;&quot;, //搜索的参数 pageSize: 10, //页数 pageNum: 1, //页码&#125;;// 用于记录路由queryconst searchParams = ref(initSearchParams);// 搜索时触发const onSearch = () =&gt; &#123; router.push(&#123; query: searchParams.value, &#125;);&#125;;// 切换tab导航时触发const onTabChange = (key: string) =&gt; &#123; router.push(&#123; path: `/$&#123;key&#125;`, query: searchParams.value, //这里加上了query &#125;);&#125;;//当路由改变时，修改searchParamswatchEffect(() =&gt; &#123; searchParams.value = &#123; ...initSearchParams, //解构 text: route.query.text, //拿到route.query.text同步到searchParams &#125; as never;&#125;); index.ts 路由 123456789101112131415161718192021import &#123; createRouter, createWebHashHistory, RouteRecordRaw &#125; from &quot;vue-router&quot;;import IndexPage from &quot;../views/IndexPage.vue&quot;;const routes: Array&lt;RouteRecordRaw&gt; = [ &#123; path: &quot;/&quot;, component: IndexPage, &#125;, &#123; path: &quot;/:category&quot;, component: IndexPage, &#125;,];const router = createRouter(&#123; history: createWebHashHistory(), routes,&#125;);export default router;","categories":[],"tags":[]},{"title":"Hello World","slug":"介绍","date":"2023-05-23T11:37:58.804Z","updated":"2023-05-23T17:22:06.559Z","comments":true,"path":"2023/05/23/介绍/","link":"","permalink":"https://chen28176.github.io/2023/05/23/%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"代编辑","categories":[],"tags":[]}],"categories":[],"tags":[]}